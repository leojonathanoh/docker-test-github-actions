name: ci-master-pr

on:
  push:
    branches:
    - master
    tags:
    - '**'
  pull_request:
    branches:
    - master

jobs:
  windows-2019:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (windows)
      run: |
        Set-StrictMode -Version Latest; $ErrorActionPreference = 'Stop'
        hostname
        whoami
        systeminfo
        Get-PSDrive
        Get-Location
        # pwsh version
        $PSVersionTable
        # Windows Powershell version?
        powershell -Command '$PSVersionTable'
  windows-2022:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (windows)
      run: |
        Set-StrictMode -Version Latest; $ErrorActionPreference = 'Stop'
        hostname
        whoami
        systeminfo
        Get-PSDrive
        Get-Location
        # pwsh version
        $PSVersionTable
        # Windows Powershell version?
        powershell -Command '$PSVersionTable'
  ubuntu-latest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        lscpu
        free
        df -h
        pwd
        docker info
        docker version
  macos-latest:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (macos)
      run: |
        set -e
        hostname
        whoami
        df -h
        pwd
        # docker info
        # docker version

  ##########
  # Docker #
  ##########
  test-powershell-6-0:
    runs-on: ubuntu-latest
    container:
      # image: theohbrothers/docker-powershell:6.0.2-ubuntu-16.04-git
      image: mcr.microsoft.com/powershell:6.0.2-ubuntu-16.04
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        lscpu
        free
        df -h
        pwd
    - name: Powershell version
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command '$PSVersionTable'
    - name: Test
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command './test/test.ps1'

  test-powershell-6-1:
    runs-on: ubuntu-latest
    container:
      # image: theohbrothers/docker-powershell:6.1.3-alpine-3.8-git
      image: mcr.microsoft.com/powershell:6.1.3-alpine-3.8
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        # lscpu
        free
        df -h
        pwd
    - name: Powershell version
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command '$PSVersionTable'
    - name: Test
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command './test/test.ps1'

  test-powershell-6-2:
    runs-on: ubuntu-latest
    container:
      # image: theohbrothers/docker-powershell:6.2.4-alpine-3.8-git
      image: mcr.microsoft.com/powershell:6.2.4-alpine-3.8
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        # lscpu
        free
        df -h
        pwd
    - name: Powershell version
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command '$PSVersionTable'
    - name: Test
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command './test/test.ps1'

  test-powershell-7-0:
    runs-on: ubuntu-latest
    container:
      # image: theohbrothers/docker-powershell:7.0.3-alpine-3.9-20200928
      image: mcr.microsoft.com/powershell:7.0.3-alpine-3.9
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        # lscpu
        free
        df -h
        pwd
    - name: Powershell version
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command '$PSVersionTable'
    - name: Test
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command './test/test.ps1'

  test-powershell-7-1:
    runs-on: ubuntu-latest
    container:
      # image: theohbrothers/docker-powershell:7.1.3-alpine-3.11-20210316-git
      image: mcr.microsoft.com/powershell:7.1.3-alpine-3.11-20210316
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        # lscpu
        free
        df -h
        pwd
    - name: Powershell version
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command '$PSVersionTable'
    - name: Test
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command './test/test.ps1'

  test-powershell-7-2:
    runs-on: ubuntu-latest
    container:
      # image: theohbrothers/docker-powershell:7.2.0-preview.4-alpine-3.11-20210316-git
      image: mcr.microsoft.com/powershell:7.2.0-preview.4-alpine-3.11-20210316
    steps:
    - uses: actions/checkout@v3
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        # lscpu
        free
        df -h
        pwd
    - name: Powershell version
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command '$PSVersionTable'
    - name: Test
      run: |
        pwsh -NoLogo -NonInteractive -NoProfile -Command './test/test.ps1'

  resolve-release-tag:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.resolve-release-tag.outputs.TAG }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Resolve release tag
        id: resolve-release-tag
        run: |
          set +e
          # E.g. 20210402
          TODAYS_DATE=$( date -u '+%Y%m%d' )
          # Is this the first tag for this date?
          TODAYS_DATE_TAGS=$( git tag --list | grep "^$TODAYS_DATE" )
          TAG=
          if [ -z "$TODAYS_DATE_TAGS" ]; then
              # E.g. 20210402.0.0
              TAG="$TODAYS_DATE.0.0" # Send this to stdout
          else
              # E.g. if there are 20210402.0.0, 20210402.0.1, 20210402.0.2, this returns 2
              VERSION_MINOR_LATEST=$( echo "$TODAYS_DATE_TAGS" | cut -d '.' -f 3 | sort -nr | head -n1 )
              # Minor version
              VERSION_MINOR=$( expr "$VERSION_MINOR_LATEST" + 1 )
              # E.g. 20210402.0.3
              TAG="$TODAYS_DATE.0.$VERSION_MINOR"  # Send this to stdout
          fi
          echo "TODAYS_DATE: $TODAYS_DATE"
          echo "TODAYS_DATE_TAGS: $TODAYS_DATE_TAGS"
          echo "TAG: $TAG"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
      - name: Print outputs
        run: echo ${{ steps.resolve-release-tag.outputs.TAG }}

  update-draft-release:
    needs: [windows-2019, windows-2022, ubuntu-latest, macos-latest, test-powershell-6-0, test-powershell-6-1, test-powershell-6-1, test-powershell-7-0, test-powershell-7-1, test-powershell-7-2, resolve-release-tag]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Print inputs
        run: echo ${{ needs.resolve-release-tag.outputs.TAG }}
      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: false
          name: ${{ needs.resolve-release-tag.outputs.TAG }}
          tag: ${{ needs.resolve-release-tag.outputs.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-draft-release:
    needs: [windows-2019, windows-2022, ubuntu-latest, macos-latest, test-powershell-6-0, test-powershell-6-1, test-powershell-6-1, test-powershell-7-0, test-powershell-7-1, test-powershell-7-2, resolve-release-tag]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        with:
          # config-name: release-drafter.yaml
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
